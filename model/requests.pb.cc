// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests.proto

#include "requests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_requests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto;
namespace communication {
namespace request {
class TokenLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TokenLogin> _instance;
} _TokenLogin_default_instance_;
class DirectoryVerification_ContentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectoryVerification_ContentsEntry_DoNotUse> _instance;
} _DirectoryVerification_ContentsEntry_DoNotUse_default_instance_;
class DirectoryVerificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectoryVerification> _instance;
} _DirectoryVerification_default_instance_;
class FileDiffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDiff> _instance;
} _FileDiff_default_instance_;
}  // namespace request
}  // namespace communication
static void InitDefaultsTokenLogin_requests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::communication::request::_TokenLogin_default_instance_;
    new (ptr) ::communication::request::TokenLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::communication::request::TokenLogin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TokenLogin_requests_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTokenLogin_requests_2eproto}, {}};

static void InitDefaultsDirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::communication::request::_DirectoryVerification_ContentsEntry_DoNotUse_default_instance_;
    new (ptr) ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse();
  }
  ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto}, {}};

static void InitDefaultsDirectoryVerification_requests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::communication::request::_DirectoryVerification_default_instance_;
    new (ptr) ::communication::request::DirectoryVerification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::communication::request::DirectoryVerification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DirectoryVerification_requests_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDirectoryVerification_requests_2eproto}, {
      &scc_info_DirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto.base,}};

static void InitDefaultsFileDiff_requests_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::communication::request::_FileDiff_default_instance_;
    new (ptr) ::communication::request::FileDiff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::communication::request::FileDiff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileDiff_requests_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileDiff_requests_2eproto}, {}};

void InitDefaults_requests_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TokenLogin_requests_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectoryVerification_ContentsEntry_DoNotUse_requests_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectoryVerification_requests_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDiff_requests_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_requests_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_requests_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_requests_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_requests_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::request::TokenLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::communication::request::TokenLogin, token_),
  PROTOBUF_FIELD_OFFSET(::communication::request::TokenLogin, name_),
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification_ContentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification_ContentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification_ContentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification_ContentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification, root_name_),
  PROTOBUF_FIELD_OFFSET(::communication::request::DirectoryVerification, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::communication::request::FileDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::communication::request::FileDiff, relative_path_),
  PROTOBUF_FIELD_OFFSET(::communication::request::FileDiff, content_),
  PROTOBUF_FIELD_OFFSET(::communication::request::FileDiff, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::communication::request::TokenLogin)},
  { 7, 14, sizeof(::communication::request::DirectoryVerification_ContentsEntry_DoNotUse)},
  { 16, -1, sizeof(::communication::request::DirectoryVerification)},
  { 23, -1, sizeof(::communication::request::FileDiff)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::communication::request::_TokenLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::communication::request::_DirectoryVerification_ContentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::communication::request::_DirectoryVerification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::communication::request::_FileDiff_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_requests_2eproto = {
  {}, AddDescriptors_requests_2eproto, "requests.proto", schemas,
  file_default_instances, TableStruct_requests_2eproto::offsets,
  file_level_metadata_requests_2eproto, 4, file_level_enum_descriptors_requests_2eproto, file_level_service_descriptors_requests_2eproto,
};

const char descriptor_table_protodef_requests_2eproto[] =
  "\n\016requests.proto\022\025communication.request\""
  ")\n\nTokenLogin\022\r\n\005token\030\001 \001(\t\022\014\n\004name\030\002 \001"
  "(\t\"\251\001\n\025DirectoryVerification\022\021\n\troot_nam"
  "e\030\001 \001(\t\022L\n\010contents\030\002 \003(\0132:.communicatio"
  "n.request.DirectoryVerification.Contents"
  "Entry\032/\n\rContentsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"B\n\010FileDiff\022\025\n\rrelative_p"
  "ath\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\016\n\006status\030\003 \001"
  "(\005b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_requests_2eproto = {
  false, InitDefaults_requests_2eproto, 
  descriptor_table_protodef_requests_2eproto,
  "requests.proto", &assign_descriptors_table_requests_2eproto, 330,
};

void AddDescriptors_requests_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_requests_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_requests_2eproto = []() { AddDescriptors_requests_2eproto(); return true; }();
namespace communication {
namespace request {

// ===================================================================

void TokenLogin::InitAsDefaultInstance() {
}
class TokenLogin::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TokenLogin::kTokenFieldNumber;
const int TokenLogin::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TokenLogin::TokenLogin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:communication.request.TokenLogin)
}
TokenLogin::TokenLogin(const TokenLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:communication.request.TokenLogin)
}

void TokenLogin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TokenLogin_requests_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TokenLogin::~TokenLogin() {
  // @@protoc_insertion_point(destructor:communication.request.TokenLogin)
  SharedDtor();
}

void TokenLogin::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TokenLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenLogin& TokenLogin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TokenLogin_requests_2eproto.base);
  return *internal_default_instance();
}


void TokenLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.request.TokenLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenLogin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TokenLogin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("communication.request.TokenLogin.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("communication.request.TokenLogin.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communication.request.TokenLogin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.TokenLogin.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.TokenLogin.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communication.request.TokenLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communication.request.TokenLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communication.request.TokenLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.TokenLogin.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.TokenLogin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:communication.request.TokenLogin)
}

::google::protobuf::uint8* TokenLogin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.request.TokenLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.TokenLogin.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.TokenLogin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.request.TokenLogin)
  return target;
}

size_t TokenLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.request.TokenLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communication.request.TokenLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenLogin* source =
      ::google::protobuf::DynamicCastToGenerated<TokenLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communication.request.TokenLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communication.request.TokenLogin)
    MergeFrom(*source);
  }
}

void TokenLogin::MergeFrom(const TokenLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communication.request.TokenLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TokenLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communication.request.TokenLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenLogin::CopyFrom(const TokenLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.request.TokenLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenLogin::IsInitialized() const {
  return true;
}

void TokenLogin::Swap(TokenLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TokenLogin::InternalSwap(TokenLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TokenLogin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_requests_2eproto);
  return ::file_level_metadata_requests_2eproto[kIndexInFileMessages];
}


// ===================================================================

DirectoryVerification_ContentsEntry_DoNotUse::DirectoryVerification_ContentsEntry_DoNotUse() {}
DirectoryVerification_ContentsEntry_DoNotUse::DirectoryVerification_ContentsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void DirectoryVerification_ContentsEntry_DoNotUse::MergeFrom(const DirectoryVerification_ContentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DirectoryVerification_ContentsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_requests_2eproto);
  return ::file_level_metadata_requests_2eproto[1];
}
void DirectoryVerification_ContentsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DirectoryVerification_ContentsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      DirectoryVerification_ContentsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "communication.request.DirectoryVerification.ContentsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "communication.request.DirectoryVerification.ContentsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void DirectoryVerification::InitAsDefaultInstance() {
}
class DirectoryVerification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryVerification::kRootNameFieldNumber;
const int DirectoryVerification::kContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryVerification::DirectoryVerification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:communication.request.DirectoryVerification)
}
DirectoryVerification::DirectoryVerification(const DirectoryVerification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.MergeFrom(from.contents_);
  root_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.root_name().size() > 0) {
    root_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_name_);
  }
  // @@protoc_insertion_point(copy_constructor:communication.request.DirectoryVerification)
}

void DirectoryVerification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DirectoryVerification_requests_2eproto.base);
  root_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DirectoryVerification::~DirectoryVerification() {
  // @@protoc_insertion_point(destructor:communication.request.DirectoryVerification)
  SharedDtor();
}

void DirectoryVerification::SharedDtor() {
  root_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryVerification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectoryVerification& DirectoryVerification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DirectoryVerification_requests_2eproto.base);
  return *internal_default_instance();
}


void DirectoryVerification::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.request.DirectoryVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.Clear();
  root_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DirectoryVerification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DirectoryVerification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string root_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("communication.request.DirectoryVerification.root_name");
        object = msg->mutable_root_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> contents = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->contents_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DirectoryVerification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communication.request.DirectoryVerification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string root_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->root_name().data(), static_cast<int>(this->root_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.DirectoryVerification.root_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DirectoryVerification_ContentsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DirectoryVerification_ContentsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&contents_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.DirectoryVerification.ContentsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.DirectoryVerification.ContentsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communication.request.DirectoryVerification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communication.request.DirectoryVerification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DirectoryVerification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communication.request.DirectoryVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string root_name = 1;
  if (this->root_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_name().data(), static_cast<int>(this->root_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.DirectoryVerification.root_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->root_name(), output);
  }

  // map<string, string> contents = 2;
  if (!this->contents().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "communication.request.DirectoryVerification.ContentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "communication.request.DirectoryVerification.ContentsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->contents().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->contents().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->contents().begin();
          it != this->contents().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DirectoryVerification_ContentsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(contents_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DirectoryVerification_ContentsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->contents().begin();
          it != this->contents().end(); ++it) {
        entry.reset(contents_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:communication.request.DirectoryVerification)
}

::google::protobuf::uint8* DirectoryVerification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.request.DirectoryVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string root_name = 1;
  if (this->root_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_name().data(), static_cast<int>(this->root_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.DirectoryVerification.root_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->root_name(), target);
  }

  // map<string, string> contents = 2;
  if (!this->contents().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "communication.request.DirectoryVerification.ContentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "communication.request.DirectoryVerification.ContentsEntry.value");
      }
    };

    if (false &&
        this->contents().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->contents().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->contents().begin();
          it != this->contents().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DirectoryVerification_ContentsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(contents_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DirectoryVerification_ContentsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->contents().begin();
          it != this->contents().end(); ++it) {
        entry.reset(contents_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.request.DirectoryVerification)
  return target;
}

size_t DirectoryVerification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.request.DirectoryVerification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> contents = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->contents_size());
  {
    ::std::unique_ptr<DirectoryVerification_ContentsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->contents().begin();
        it != this->contents().end(); ++it) {
      entry.reset(contents_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string root_name = 1;
  if (this->root_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->root_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryVerification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communication.request.DirectoryVerification)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryVerification* source =
      ::google::protobuf::DynamicCastToGenerated<DirectoryVerification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communication.request.DirectoryVerification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communication.request.DirectoryVerification)
    MergeFrom(*source);
  }
}

void DirectoryVerification::MergeFrom(const DirectoryVerification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communication.request.DirectoryVerification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contents_.MergeFrom(from.contents_);
  if (from.root_name().size() > 0) {

    root_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_name_);
  }
}

void DirectoryVerification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communication.request.DirectoryVerification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryVerification::CopyFrom(const DirectoryVerification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.request.DirectoryVerification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryVerification::IsInitialized() const {
  return true;
}

void DirectoryVerification::Swap(DirectoryVerification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryVerification::InternalSwap(DirectoryVerification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  contents_.Swap(&other->contents_);
  root_name_.Swap(&other->root_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DirectoryVerification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_requests_2eproto);
  return ::file_level_metadata_requests_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileDiff::InitAsDefaultInstance() {
}
class FileDiff::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDiff::kRelativePathFieldNumber;
const int FileDiff::kContentFieldNumber;
const int FileDiff::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDiff::FileDiff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:communication.request.FileDiff)
}
FileDiff::FileDiff(const FileDiff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.relative_path().size() > 0) {
    relative_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:communication.request.FileDiff)
}

void FileDiff::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileDiff_requests_2eproto.base);
  relative_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

FileDiff::~FileDiff() {
  // @@protoc_insertion_point(destructor:communication.request.FileDiff)
  SharedDtor();
}

void FileDiff::SharedDtor() {
  relative_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileDiff& FileDiff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileDiff_requests_2eproto.base);
  return *internal_default_instance();
}


void FileDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:communication.request.FileDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileDiff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileDiff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string relative_path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("communication.request.FileDiff.relative_path");
        object = msg->mutable_relative_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("communication.request.FileDiff.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communication.request.FileDiff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string relative_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->relative_path().data(), static_cast<int>(this->relative_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.FileDiff.relative_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "communication.request.FileDiff.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communication.request.FileDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communication.request.FileDiff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communication.request.FileDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string relative_path = 1;
  if (this->relative_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_path().data(), static_cast<int>(this->relative_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.FileDiff.relative_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relative_path(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.FileDiff.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:communication.request.FileDiff)
}

::google::protobuf::uint8* FileDiff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communication.request.FileDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string relative_path = 1;
  if (this->relative_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_path().data(), static_cast<int>(this->relative_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.FileDiff.relative_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relative_path(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "communication.request.FileDiff.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communication.request.FileDiff)
  return target;
}

size_t FileDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communication.request.FileDiff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relative_path = 1;
  if (this->relative_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relative_path());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDiff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communication.request.FileDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const FileDiff* source =
      ::google::protobuf::DynamicCastToGenerated<FileDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communication.request.FileDiff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communication.request.FileDiff)
    MergeFrom(*source);
  }
}

void FileDiff::MergeFrom(const FileDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communication.request.FileDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.relative_path().size() > 0) {

    relative_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void FileDiff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communication.request.FileDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDiff::CopyFrom(const FileDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communication.request.FileDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDiff::IsInitialized() const {
  return true;
}

void FileDiff::Swap(FileDiff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDiff::InternalSwap(FileDiff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  relative_path_.Swap(&other->relative_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::google::protobuf::Metadata FileDiff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_requests_2eproto);
  return ::file_level_metadata_requests_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace request
}  // namespace communication
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::communication::request::TokenLogin* Arena::CreateMaybeMessage< ::communication::request::TokenLogin >(Arena* arena) {
  return Arena::CreateInternal< ::communication::request::TokenLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::communication::request::DirectoryVerification* Arena::CreateMaybeMessage< ::communication::request::DirectoryVerification >(Arena* arena) {
  return Arena::CreateInternal< ::communication::request::DirectoryVerification >(arena);
}
template<> PROTOBUF_NOINLINE ::communication::request::FileDiff* Arena::CreateMaybeMessage< ::communication::request::FileDiff >(Arena* arena) {
  return Arena::CreateInternal< ::communication::request::FileDiff >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
