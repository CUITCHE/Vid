// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requests.proto

#ifndef PROTOBUF_INCLUDED_requests_2eproto
#define PROTOBUF_INCLUDED_requests_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_requests_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_requests_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_requests_2eproto();
namespace communication {
namespace request {
class DirectoryVerification;
class DirectoryVerificationDefaultTypeInternal;
extern DirectoryVerificationDefaultTypeInternal _DirectoryVerification_default_instance_;
class DirectoryVerification_ContentsEntry_DoNotUse;
class DirectoryVerification_ContentsEntry_DoNotUseDefaultTypeInternal;
extern DirectoryVerification_ContentsEntry_DoNotUseDefaultTypeInternal _DirectoryVerification_ContentsEntry_DoNotUse_default_instance_;
class FileDiff;
class FileDiffDefaultTypeInternal;
extern FileDiffDefaultTypeInternal _FileDiff_default_instance_;
class TokenLogin;
class TokenLoginDefaultTypeInternal;
extern TokenLoginDefaultTypeInternal _TokenLogin_default_instance_;
}  // namespace request
}  // namespace communication
namespace google {
namespace protobuf {
template<> ::communication::request::DirectoryVerification* Arena::CreateMaybeMessage<::communication::request::DirectoryVerification>(Arena*);
template<> ::communication::request::DirectoryVerification_ContentsEntry_DoNotUse* Arena::CreateMaybeMessage<::communication::request::DirectoryVerification_ContentsEntry_DoNotUse>(Arena*);
template<> ::communication::request::FileDiff* Arena::CreateMaybeMessage<::communication::request::FileDiff>(Arena*);
template<> ::communication::request::TokenLogin* Arena::CreateMaybeMessage<::communication::request::TokenLogin>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace communication {
namespace request {

// ===================================================================

class TokenLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:communication.request.TokenLogin) */ {
 public:
  TokenLogin();
  virtual ~TokenLogin();

  TokenLogin(const TokenLogin& from);

  inline TokenLogin& operator=(const TokenLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TokenLogin(TokenLogin&& from) noexcept
    : TokenLogin() {
    *this = ::std::move(from);
  }

  inline TokenLogin& operator=(TokenLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TokenLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenLogin* internal_default_instance() {
    return reinterpret_cast<const TokenLogin*>(
               &_TokenLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TokenLogin* other);
  friend void swap(TokenLogin& a, TokenLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TokenLogin* New() const final {
    return CreateMaybeMessage<TokenLogin>(nullptr);
  }

  TokenLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TokenLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TokenLogin& from);
  void MergeFrom(const TokenLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:communication.request.TokenLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_requests_2eproto;
};
// -------------------------------------------------------------------

class DirectoryVerification_ContentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DirectoryVerification_ContentsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<DirectoryVerification_ContentsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DirectoryVerification_ContentsEntry_DoNotUse();
  DirectoryVerification_ContentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DirectoryVerification_ContentsEntry_DoNotUse& other);
  static const DirectoryVerification_ContentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DirectoryVerification_ContentsEntry_DoNotUse*>(&_DirectoryVerification_ContentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DirectoryVerification :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:communication.request.DirectoryVerification) */ {
 public:
  DirectoryVerification();
  virtual ~DirectoryVerification();

  DirectoryVerification(const DirectoryVerification& from);

  inline DirectoryVerification& operator=(const DirectoryVerification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectoryVerification(DirectoryVerification&& from) noexcept
    : DirectoryVerification() {
    *this = ::std::move(from);
  }

  inline DirectoryVerification& operator=(DirectoryVerification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DirectoryVerification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryVerification* internal_default_instance() {
    return reinterpret_cast<const DirectoryVerification*>(
               &_DirectoryVerification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DirectoryVerification* other);
  friend void swap(DirectoryVerification& a, DirectoryVerification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectoryVerification* New() const final {
    return CreateMaybeMessage<DirectoryVerification>(nullptr);
  }

  DirectoryVerification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryVerification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DirectoryVerification& from);
  void MergeFrom(const DirectoryVerification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryVerification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> contents = 2;
  int contents_size() const;
  void clear_contents();
  static const int kContentsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      contents() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_contents();

  // string root_name = 1;
  void clear_root_name();
  static const int kRootNameFieldNumber = 1;
  const ::std::string& root_name() const;
  void set_root_name(const ::std::string& value);
  #if LANG_CXX11
  void set_root_name(::std::string&& value);
  #endif
  void set_root_name(const char* value);
  void set_root_name(const char* value, size_t size);
  ::std::string* mutable_root_name();
  ::std::string* release_root_name();
  void set_allocated_root_name(::std::string* root_name);

  // @@protoc_insertion_point(class_scope:communication.request.DirectoryVerification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DirectoryVerification_ContentsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > contents_;
  ::google::protobuf::internal::ArenaStringPtr root_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_requests_2eproto;
};
// -------------------------------------------------------------------

class FileDiff :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:communication.request.FileDiff) */ {
 public:
  FileDiff();
  virtual ~FileDiff();

  FileDiff(const FileDiff& from);

  inline FileDiff& operator=(const FileDiff& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDiff(FileDiff&& from) noexcept
    : FileDiff() {
    *this = ::std::move(from);
  }

  inline FileDiff& operator=(FileDiff&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileDiff& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDiff* internal_default_instance() {
    return reinterpret_cast<const FileDiff*>(
               &_FileDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileDiff* other);
  friend void swap(FileDiff& a, FileDiff& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDiff* New() const final {
    return CreateMaybeMessage<FileDiff>(nullptr);
  }

  FileDiff* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDiff>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileDiff& from);
  void MergeFrom(const FileDiff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDiff* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string relative_path = 1;
  void clear_relative_path();
  static const int kRelativePathFieldNumber = 1;
  const ::std::string& relative_path() const;
  void set_relative_path(const ::std::string& value);
  #if LANG_CXX11
  void set_relative_path(::std::string&& value);
  #endif
  void set_relative_path(const char* value);
  void set_relative_path(const char* value, size_t size);
  ::std::string* mutable_relative_path();
  ::std::string* release_relative_path();
  void set_allocated_relative_path(::std::string* relative_path);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:communication.request.FileDiff)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr relative_path_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_requests_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenLogin

// string token = 1;
inline void TokenLogin::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TokenLogin::token() const {
  // @@protoc_insertion_point(field_get:communication.request.TokenLogin.token)
  return token_.GetNoArena();
}
inline void TokenLogin::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communication.request.TokenLogin.token)
}
#if LANG_CXX11
inline void TokenLogin::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communication.request.TokenLogin.token)
}
#endif
inline void TokenLogin::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communication.request.TokenLogin.token)
}
inline void TokenLogin::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communication.request.TokenLogin.token)
}
inline ::std::string* TokenLogin::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:communication.request.TokenLogin.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TokenLogin::release_token() {
  // @@protoc_insertion_point(field_release:communication.request.TokenLogin.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TokenLogin::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:communication.request.TokenLogin.token)
}

// string name = 2;
inline void TokenLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TokenLogin::name() const {
  // @@protoc_insertion_point(field_get:communication.request.TokenLogin.name)
  return name_.GetNoArena();
}
inline void TokenLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communication.request.TokenLogin.name)
}
#if LANG_CXX11
inline void TokenLogin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communication.request.TokenLogin.name)
}
#endif
inline void TokenLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communication.request.TokenLogin.name)
}
inline void TokenLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communication.request.TokenLogin.name)
}
inline ::std::string* TokenLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:communication.request.TokenLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TokenLogin::release_name() {
  // @@protoc_insertion_point(field_release:communication.request.TokenLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TokenLogin::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:communication.request.TokenLogin.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DirectoryVerification

// string root_name = 1;
inline void DirectoryVerification::clear_root_name() {
  root_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryVerification::root_name() const {
  // @@protoc_insertion_point(field_get:communication.request.DirectoryVerification.root_name)
  return root_name_.GetNoArena();
}
inline void DirectoryVerification::set_root_name(const ::std::string& value) {
  
  root_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communication.request.DirectoryVerification.root_name)
}
#if LANG_CXX11
inline void DirectoryVerification::set_root_name(::std::string&& value) {
  
  root_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communication.request.DirectoryVerification.root_name)
}
#endif
inline void DirectoryVerification::set_root_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communication.request.DirectoryVerification.root_name)
}
inline void DirectoryVerification::set_root_name(const char* value, size_t size) {
  
  root_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communication.request.DirectoryVerification.root_name)
}
inline ::std::string* DirectoryVerification::mutable_root_name() {
  
  // @@protoc_insertion_point(field_mutable:communication.request.DirectoryVerification.root_name)
  return root_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryVerification::release_root_name() {
  // @@protoc_insertion_point(field_release:communication.request.DirectoryVerification.root_name)
  
  return root_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryVerification::set_allocated_root_name(::std::string* root_name) {
  if (root_name != nullptr) {
    
  } else {
    
  }
  root_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_name);
  // @@protoc_insertion_point(field_set_allocated:communication.request.DirectoryVerification.root_name)
}

// map<string, string> contents = 2;
inline int DirectoryVerification::contents_size() const {
  return contents_.size();
}
inline void DirectoryVerification::clear_contents() {
  contents_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DirectoryVerification::contents() const {
  // @@protoc_insertion_point(field_map:communication.request.DirectoryVerification.contents)
  return contents_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DirectoryVerification::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_map:communication.request.DirectoryVerification.contents)
  return contents_.MutableMap();
}

// -------------------------------------------------------------------

// FileDiff

// string relative_path = 1;
inline void FileDiff::clear_relative_path() {
  relative_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDiff::relative_path() const {
  // @@protoc_insertion_point(field_get:communication.request.FileDiff.relative_path)
  return relative_path_.GetNoArena();
}
inline void FileDiff::set_relative_path(const ::std::string& value) {
  
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communication.request.FileDiff.relative_path)
}
#if LANG_CXX11
inline void FileDiff::set_relative_path(::std::string&& value) {
  
  relative_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communication.request.FileDiff.relative_path)
}
#endif
inline void FileDiff::set_relative_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communication.request.FileDiff.relative_path)
}
inline void FileDiff::set_relative_path(const char* value, size_t size) {
  
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communication.request.FileDiff.relative_path)
}
inline ::std::string* FileDiff::mutable_relative_path() {
  
  // @@protoc_insertion_point(field_mutable:communication.request.FileDiff.relative_path)
  return relative_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDiff::release_relative_path() {
  // @@protoc_insertion_point(field_release:communication.request.FileDiff.relative_path)
  
  return relative_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDiff::set_allocated_relative_path(::std::string* relative_path) {
  if (relative_path != nullptr) {
    
  } else {
    
  }
  relative_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relative_path);
  // @@protoc_insertion_point(field_set_allocated:communication.request.FileDiff.relative_path)
}

// string content = 2;
inline void FileDiff::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDiff::content() const {
  // @@protoc_insertion_point(field_get:communication.request.FileDiff.content)
  return content_.GetNoArena();
}
inline void FileDiff::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communication.request.FileDiff.content)
}
#if LANG_CXX11
inline void FileDiff::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communication.request.FileDiff.content)
}
#endif
inline void FileDiff::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communication.request.FileDiff.content)
}
inline void FileDiff::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communication.request.FileDiff.content)
}
inline ::std::string* FileDiff::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:communication.request.FileDiff.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDiff::release_content() {
  // @@protoc_insertion_point(field_release:communication.request.FileDiff.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDiff::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:communication.request.FileDiff.content)
}

// int32 status = 3;
inline void FileDiff::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 FileDiff::status() const {
  // @@protoc_insertion_point(field_get:communication.request.FileDiff.status)
  return status_;
}
inline void FileDiff::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:communication.request.FileDiff.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_requests_2eproto
